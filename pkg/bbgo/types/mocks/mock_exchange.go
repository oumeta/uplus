// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/c9s/bbgo/pkg/types (interfaces: Exchange)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/c9s/bbgo/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// MockExchange is a mock of Exchange interface.
type MockExchange struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeMockRecorder
}

// MockExchangeMockRecorder is the mock recorder for MockExchange.
type MockExchangeMockRecorder struct {
	mock *MockExchange
}

// NewMockExchange creates a new mock instance.
func NewMockExchange(ctrl *gomock.Controller) *MockExchange {
	mock := &MockExchange{ctrl: ctrl}
	mock.recorder = &MockExchangeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchange) EXPECT() *MockExchangeMockRecorder {
	return m.recorder
}

// CancelOrders mocks base method.
func (m *MockExchange) CancelOrders(arg0 context.Context, arg1 ...types.Order) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelOrders", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrders indicates an expected call of CancelOrders.
func (mr *MockExchangeMockRecorder) CancelOrders(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrders", reflect.TypeOf((*MockExchange)(nil).CancelOrders), varargs...)
}

// Name mocks base method.
func (m *MockExchange) Name() types.ExchangeName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(types.ExchangeName)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockExchangeMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockExchange)(nil).Name))
}

// NewStream mocks base method.
func (m *MockExchange) NewStream() types.Stream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStream")
	ret0, _ := ret[0].(types.Stream)
	return ret0
}

// NewStream indicates an expected call of NewStream.
func (mr *MockExchangeMockRecorder) NewStream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStream", reflect.TypeOf((*MockExchange)(nil).NewStream))
}

// PlatformFeeCurrency mocks base method.
func (m *MockExchange) PlatformFeeCurrency() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlatformFeeCurrency")
	ret0, _ := ret[0].(string)
	return ret0
}

// PlatformFeeCurrency indicates an expected call of PlatformFeeCurrency.
func (mr *MockExchangeMockRecorder) PlatformFeeCurrency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlatformFeeCurrency", reflect.TypeOf((*MockExchange)(nil).PlatformFeeCurrency))
}

// QueryAccount mocks base method.
func (m *MockExchange) QueryAccount(arg0 context.Context) (*types.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAccount", arg0)
	ret0, _ := ret[0].(*types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAccount indicates an expected call of QueryAccount.
func (mr *MockExchangeMockRecorder) QueryAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAccount", reflect.TypeOf((*MockExchange)(nil).QueryAccount), arg0)
}

// QueryAccountBalances mocks base method.
func (m *MockExchange) QueryAccountBalances(arg0 context.Context) (types.BalanceMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAccountBalances", arg0)
	ret0, _ := ret[0].(types.BalanceMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAccountBalances indicates an expected call of QueryAccountBalances.
func (mr *MockExchangeMockRecorder) QueryAccountBalances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAccountBalances", reflect.TypeOf((*MockExchange)(nil).QueryAccountBalances), arg0)
}

// QueryKLines mocks base method.
func (m *MockExchange) QueryKLines(arg0 context.Context, arg1 string, arg2 types.Interval, arg3 types.KLineQueryOptions) ([]types.KLine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryKLines", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]types.KLine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryKLines indicates an expected call of QueryKLines.
func (mr *MockExchangeMockRecorder) QueryKLines(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryKLines", reflect.TypeOf((*MockExchange)(nil).QueryKLines), arg0, arg1, arg2, arg3)
}

// QueryMarkets mocks base method.
func (m *MockExchange) QueryMarkets(arg0 context.Context) (types.MarketMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMarkets", arg0)
	ret0, _ := ret[0].(types.MarketMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMarkets indicates an expected call of QueryMarkets.
func (mr *MockExchangeMockRecorder) QueryMarkets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMarkets", reflect.TypeOf((*MockExchange)(nil).QueryMarkets), arg0)
}

// QueryOpenOrders mocks base method.
func (m *MockExchange) QueryOpenOrders(arg0 context.Context, arg1 string) ([]types.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryOpenOrders", arg0, arg1)
	ret0, _ := ret[0].([]types.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryOpenOrders indicates an expected call of QueryOpenOrders.
func (mr *MockExchangeMockRecorder) QueryOpenOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOpenOrders", reflect.TypeOf((*MockExchange)(nil).QueryOpenOrders), arg0, arg1)
}

// QueryTicker mocks base method.
func (m *MockExchange) QueryTicker(arg0 context.Context, arg1 string) (*types.Ticker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTicker", arg0, arg1)
	ret0, _ := ret[0].(*types.Ticker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTicker indicates an expected call of QueryTicker.
func (mr *MockExchangeMockRecorder) QueryTicker(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTicker", reflect.TypeOf((*MockExchange)(nil).QueryTicker), arg0, arg1)
}

// QueryTickers mocks base method.
func (m *MockExchange) QueryTickers(arg0 context.Context, arg1 ...string) (map[string]types.Ticker, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryTickers", varargs...)
	ret0, _ := ret[0].(map[string]types.Ticker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTickers indicates an expected call of QueryTickers.
func (mr *MockExchangeMockRecorder) QueryTickers(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTickers", reflect.TypeOf((*MockExchange)(nil).QueryTickers), varargs...)
}

// SubmitOrders mocks base method.
func (m *MockExchange) SubmitOrders(arg0 context.Context, arg1 ...types.SubmitOrder) (types.OrderSlice, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitOrders", varargs...)
	ret0, _ := ret[0].(types.OrderSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitOrders indicates an expected call of SubmitOrders.
func (mr *MockExchangeMockRecorder) SubmitOrders(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitOrders", reflect.TypeOf((*MockExchange)(nil).SubmitOrders), varargs...)
}
