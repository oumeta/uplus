// Code generated by "requestgen -type PlaceOrderRequest"; DO NOT EDIT.

package okexapi

import (
	"encoding/json"
	"fmt"
	"net/url"
)

func (p *PlaceOrderRequest) InstrumentID(instrumentID string) *PlaceOrderRequest {
	p.instrumentID = instrumentID
	return p
}

func (p *PlaceOrderRequest) TradeMode(tradeMode string) *PlaceOrderRequest {
	p.tradeMode = tradeMode
	return p
}

func (p *PlaceOrderRequest) ClientOrderID(clientOrderID string) *PlaceOrderRequest {
	p.clientOrderID = &clientOrderID
	return p
}

func (p *PlaceOrderRequest) Tag(tag string) *PlaceOrderRequest {
	p.tag = &tag
	return p
}

func (p *PlaceOrderRequest) Side(side SideType) *PlaceOrderRequest {
	p.side = side
	return p
}

func (p *PlaceOrderRequest) OrderType(orderType OrderType) *PlaceOrderRequest {
	p.orderType = orderType
	return p
}

func (p *PlaceOrderRequest) Quantity(quantity string) *PlaceOrderRequest {
	p.quantity = quantity
	return p
}

func (p *PlaceOrderRequest) Price(price string) *PlaceOrderRequest {
	p.price = &price
	return p
}

func (p *PlaceOrderRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	// check instrumentID field -> json key instId
	instrumentID := p.instrumentID

	// assign parameter of instrumentID
	params["instId"] = instrumentID

	// check tradeMode field -> json key tdMode
	tradeMode := p.tradeMode

	switch tradeMode {
	case "cross", "isolated", "cash":
		params["tdMode"] = tradeMode

	default:
		return params, fmt.Errorf("tdMode value %v is invalid", tradeMode)

	}

	// assign parameter of tradeMode
	params["tdMode"] = tradeMode

	// check clientOrderID field -> json key clOrdId
	if p.clientOrderID != nil {
		clientOrderID := *p.clientOrderID

		// assign parameter of clientOrderID
		params["clOrdId"] = clientOrderID
	}

	// check tag field -> json key tag
	if p.tag != nil {
		tag := *p.tag

		// assign parameter of tag
		params["tag"] = tag
	}

	// check side field -> json key side
	side := p.side

	switch side {
	case "buy", "sell":
		params["side"] = side

	default:
		return params, fmt.Errorf("side value %v is invalid", side)

	}

	// assign parameter of side
	params["side"] = side

	// check orderType field -> json key ordType
	orderType := p.orderType

	// assign parameter of orderType
	params["ordType"] = orderType

	// check quantity field -> json key sz
	quantity := p.quantity

	// assign parameter of quantity
	params["sz"] = quantity

	// check price field -> json key px
	if p.price != nil {
		price := *p.price

		// assign parameter of price
		params["px"] = price
	}

	return params, nil
}

func (p *PlaceOrderRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := p.GetParameters()
	if err != nil {
		return query, err
	}

	for k, v := range params {
		query.Add(k, fmt.Sprintf("%v", v))
	}

	return query, nil
}

func (p *PlaceOrderRequest) GetParametersJSON() ([]byte, error) {
	params, err := p.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}
