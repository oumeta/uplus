// Code generated by "requestgen -method POST -responseType .APIResponse -responseDataField Result -url /api/orders -type PlaceOrderRequest -responseDataType .Order"; DO NOT EDIT.

package ftxapi

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/c9s/bbgo/pkg/fixedpoint"
	"net/url"
	"regexp"
)

func (p *PlaceOrderRequest) Market(market string) *PlaceOrderRequest {
	p.market = market
	return p
}

func (p *PlaceOrderRequest) Side(side Side) *PlaceOrderRequest {
	p.side = side
	return p
}

func (p *PlaceOrderRequest) Price(price fixedpoint.Value) *PlaceOrderRequest {
	p.price = price
	return p
}

func (p *PlaceOrderRequest) Size(size fixedpoint.Value) *PlaceOrderRequest {
	p.size = size
	return p
}

func (p *PlaceOrderRequest) OrderType(orderType OrderType) *PlaceOrderRequest {
	p.orderType = orderType
	return p
}

func (p *PlaceOrderRequest) Ioc(ioc bool) *PlaceOrderRequest {
	p.ioc = &ioc
	return p
}

func (p *PlaceOrderRequest) PostOnly(postOnly bool) *PlaceOrderRequest {
	p.postOnly = &postOnly
	return p
}

func (p *PlaceOrderRequest) ClientID(clientID string) *PlaceOrderRequest {
	p.clientID = &clientID
	return p
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (p *PlaceOrderRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for k, v := range params {
		query.Add(k, fmt.Sprintf("%v", v))
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (p *PlaceOrderRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check market field -> json key market
	market := p.market

	// TEMPLATE check-required
	if len(market) == 0 {
		return params, fmt.Errorf("market is required, empty string given")
	}
	// END TEMPLATE check-required

	// assign parameter of market
	params["market"] = market
	// check side field -> json key side
	side := p.side

	// TEMPLATE check-required
	if len(side) == 0 {
		return params, fmt.Errorf("side is required, empty string given")
	}
	// END TEMPLATE check-required

	// assign parameter of side
	params["side"] = side
	// check price field -> json key price
	price := p.price

	// assign parameter of price
	params["price"] = price
	// check size field -> json key size
	size := p.size

	// assign parameter of size
	params["size"] = size
	// check orderType field -> json key type
	orderType := p.orderType

	// assign parameter of orderType
	params["type"] = orderType
	// check ioc field -> json key ioc
	if p.ioc != nil {
		ioc := *p.ioc

		// assign parameter of ioc
		params["ioc"] = ioc
	} else {
	}
	// check postOnly field -> json key postOnly
	if p.postOnly != nil {
		postOnly := *p.postOnly

		// assign parameter of postOnly
		params["postOnly"] = postOnly
	} else {
	}
	// check clientID field -> json key clientId
	if p.clientID != nil {
		clientID := *p.clientID

		// assign parameter of clientID
		params["clientId"] = clientID
	} else {
	}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (p *PlaceOrderRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := p.GetParameters()
	if err != nil {
		return query, err
	}

	for k, v := range params {
		query.Add(k, fmt.Sprintf("%v", v))
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (p *PlaceOrderRequest) GetParametersJSON() ([]byte, error) {
	params, err := p.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (p *PlaceOrderRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (p *PlaceOrderRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for k, v := range slugs {
		needleRE := regexp.MustCompile(":" + k + "\\b")
		url = needleRE.ReplaceAllString(url, v)
	}

	return url
}

func (p *PlaceOrderRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := p.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for k, v := range params {
		slugs[k] = fmt.Sprintf("%v", v)
	}

	return slugs, nil
}

func (p *PlaceOrderRequest) Do(ctx context.Context) (*Order, error) {

	params, err := p.GetParameters()
	if err != nil {
		return nil, err
	}
	query := url.Values{}

	apiURL := "/api/orders"

	req, err := p.client.NewAuthenticatedRequest(ctx, "POST", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := p.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse APIResponse
	if err := response.DecodeJSON(&apiResponse); err != nil {
		return nil, err
	}
	var data Order
	if err := json.Unmarshal(apiResponse.Result, &data); err != nil {
		return nil, err
	}
	return &data, nil
}
